
<!-- Start Example -->
<div class="mt-12 sm:mt-24 overflow-hidden bg-gray-50 border border-gray-200 rounded-md divide-y divide-gray-200">
    <div class="p-4 bg-gradient-to-r from-bg-start to-bg-end text-white text-2xl font-nunito font-bold">
        Getting Started
    </div>
    <div class="p-4">
        <p class="pb-4 prose max-w-prose">
            Let's start with creating our first elements, or <em>tags</em> as we call them, using the DSL.
            First we need to call the <code>render</code> function in order to create a <code>RenderContext</code>
            for our tags. Every tag is just a function representing an HTML-element, <code>&lt;div&gt;</code> in this case.
            You can nest them just like in HTML. To style your tags, add CSS-class-names directly as first parameter.
        </p>
        <div class="grid grid-cols-1 gap-2 sm:grid-cols-2">
            {% highlight "kotlin" %}
fun main() {
    render {
        div("my-style-class") {
            h2 {
                +"Hello Peter!"
            }
        }
    }
}
            {% endhighlight %}
            <div class="border border-gray-200 bg-gray-300 h-full overflow-hidden rounded-md">
                <div class="p-3 uppercase text-gray-700">
                    Result
                </div>
                <div class="h-full">
                    <iframe title="Getting Started example" class="w-full h-full" src="/snippets/index.html#start"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Simple Example -->
<div class="mt-12 sm:mt-24 overflow-hidden bg-gray-50 border border-gray-200 rounded-md divide-y divide-gray-200">
    <div class="p-4 bg-gradient-to-r from-bg-start to-bg-end text-white text-2xl font-nunito font-bold">
        Structuring your UI
    </div>
    <div class="p-4">
        <p class="pb-4 prose max-w-prose">
            To divide your code into reusable fragments, simply write functions with a <code>RenderContext</code> receiver
            - they can be called from inside any render-context.
            In this example we create a <code>greet</code> function and call it multiple times with different <code>name</code>s.
        </p>
        <div class="grid grid-cols-1 gap-2 sm:grid-cols-2">
                {% highlight "kotlin" %}
fun RenderContext.greet(name: String) {
    h2 {
        +"Hello $name!"
    }
}

render {
    div("my-style-class") {
        greet("Peter")
        greet("Paul")
        greet("Marry")
    }
}
                {% endhighlight %}
            <div class="border border-gray-200 bg-gray-300 h-full overflow-hidden rounded-md">
                <div class="p-3 uppercase text-gray-700">
                    Result
                </div>
                <div class="h-full">
                    <iframe title="Structuring your UI example" class="w-full h-full" src="/snippets/index.html#simple"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Reactive Example -->
<div class="mt-12 sm:mt-24 overflow-hidden bg-gray-50 border border-gray-200 rounded-md divide-y divide-gray-200">
    <div class="p-4 bg-gradient-to-r from-bg-start to-bg-end text-white text-2xl font-nunito font-bold">
        Getting Reactive
    </div>
    <div class="p-4">
        <p class="pb-4 prose max-w-prose">
            Let's get a little more reactive by using a <code>Store</code> to store our data.
            Stores are needed for two-way data binding in fritz2.
            Access the store's data as a <code>Flow</code> by calling <code>store.data</code>,
            then render it into the <code>value</code> attribute of the <code>&lt;input&gt;</code> tag (this is one-way data binding).
            To update the data inside the store, call the <code>update</code> handler by using the
            <code>handledBy</code> function (two-way data binding).
        </p>
        <div class="grid grid-cols-1 gap-2 sm:grid-cols-2">
                {% highlight "kotlin" %}
val store = storeOf("Hello Peter")

render {
    div("...") {
        input("...") {
            type("text")
            value(store.data)
            changes.values() handledBy store.update
        }
        p("...") {
            store.data.renderText(into = this)
        }
    }
}
                {% endhighlight %}
            <div class="border border-gray-200 bg-gray-300 h-full overflow-hidden rounded-md">
                <div class="p-3 uppercase text-gray-700">
                    Result
                </div>
                <div class="h-full">
                    <iframe title="Getting Reactive example" class="w-full h-full" src="/snippets/index.html#reactive"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Complex Example -->
<div class="mt-12 sm:mt-24 overflow-hidden bg-gray-50 border border-gray-200 rounded-md divide-y divide-gray-200">
    <div class="p-4 bg-gradient-to-r from-bg-start to-bg-end text-white text-2xl font-nunito font-bold">
        Validation
    </div>
    <div class="p-4">
        <p class="pb-4 prose max-w-prose">
            As you have seen, fritz2 considers data-handling a first class citizen of any reactive web-app.
            Think of the UI as a rule driven, derived representation of the application data.
            That's why our framework also natively supports validation as part of the data-handling.
        </p>
        <p class="pb-4 prose max-w-prose">
            In order to evaluate data correctness, create a container for the messages by implementing
            <code>ValidationMessage</code>. You also have to provide a <code>Validation</code> instance by using the factory
            function <code>validation</code>. The latter contains all the domain rules to check the validity state. 
            There is a special <code>storeOf</code> factory function which directly accepts a
            <code>Validation</code>-object. It will be automatically evaluated on each update. Last but not least,
            use the provided <code>store.messages</code> flow to display errors and warnings for the user.
        </p>
        <div class="grid grid-cols-1 gap-2 sm:grid-cols-2">
            <div>
                {% highlight "kotlin" %}
class Message(
    override val path: String,
    val text: String
): ValidationMessage {
    override val isError: Boolean = true
}

val mailRegex = Regex("""\S+@\S+\.\S+""")
val validation = validation<String, Message> {
    if(!mailRegex.matches(it.data))
        add(Message(it.path,"Not a valid mail address"))
}

val store = storeOf("", validation)

render {
    div("...") {
        input("...") {
            type("text")
            placeholder("Enter e-mail address")
            value(store.data)
            changes.values() handledBy store.update
        }
        store.messages.renderEach {
            p("...") {
                +it.text
            }
        }
    }
}
                {% endhighlight %}
            </div>
            <div class="border border-gray-200 bg-gray-300 h-full overflow-hidden rounded-md">
                <div class="p-3 uppercase text-gray-700">
                    Result
                </div>
                <div class="h-full">
                    <iframe title="Validation example" class="w-full h-full" src="/snippets/index.html#complex"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>